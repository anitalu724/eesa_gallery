{"version":3,"sources":["components/NavBar.js","App.js","serviceWorker.js","index.js","images/eesa-icon.png"],"names":["NavItem","react_default","a","createElement","ListItem_default","button","Typography_default","variant","style","fontSize","marginRight","textAlign","this","props","value","Component","NavBar","List_default","component","display","marginLeft","NavBar_NavItem","App","height","width","AppBar_default","id","position","Toolbar_default","Avatar_default","src","eesa_icon","components_NavBar","Search_default","Paper_default","Button_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"kTAKMA,mLAEE,OACIC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAUG,OAAO,QACbJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAYK,QAAQ,QAAQC,MAAO,CAACC,SAAU,MAAOC,YAAY,QAASC,UAAW,WAChFC,KAAKC,MAAMC,eALVC,aA0BPC,mLAbP,OACIf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAMgB,UAAU,MAAMV,MAAO,CAACW,QAAQ,OAAQC,WAAY,SACtDnB,EAAAC,EAAAC,cAACkB,EAAD,CAASP,MAAM,YACfb,EAAAC,EAAAC,cAACkB,EAAD,CAASP,MAAM,UACfb,EAAAC,EAAAC,cAACkB,EAAD,CAASP,MAAM,aACfb,EAAAC,EAAAC,cAACkB,EAAD,CAASP,MAAM,cACfb,EAAAC,EAAAC,cAACkB,EAAD,CAASP,MAAM,UACfb,EAAAC,EAAAC,cAACkB,EAAD,CAASP,MAAM,mBATVC,0FC6BNO,mLA/Bb,OACCrB,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAACe,OAAO,OAAQC,MAAO,SAClCvB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAQwB,GAAG,SAASC,SAAS,UAC5B1B,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAASM,MAAO,CAACW,QAAQ,SACxBlB,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CAAQ4B,IAAKC,IAAWL,GAAG,WAC3BzB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAYK,QAAQ,QAAQmB,GAAG,eAA/B,YAGAzB,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,KACCD,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CAAQwB,GAAG,kBAIdzB,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CAAOwB,GAAG,kBACTzB,EAAAC,EAAAC,cAAA,OAAKuB,GAAG,6BACRzB,EAAAC,EAAAC,cAAA,OAAKuB,GAAG,kBACPzB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAYK,QAAQ,QAAQmB,GAAG,cAA/B,wFAGAzB,EAAAC,EAAAC,cAAA,OAAKuB,GAAG,kBACPzB,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CAAQwB,GAAG,WAAX,4BACAzB,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CAAQwB,GAAG,WAAX,yDAxBWX,aCAEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.eb7911fe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport TypoGraphy from '@material-ui/core/Typography';\n\nclass NavItem extends Component {\n    render() {\n        return(\n            <ListItem button=\"true\">\n                <TypoGraphy variant=\"title\" style={{fontSize: '1em', marginRight:'1.5em', textAlign: 'center'}}>\n                    {this.props.value}\n                </TypoGraphy>\n            </ListItem>\n        );\n    }\n}\nclass NavBar extends Component {\n    render() {\n        return(\n            <List component=\"nav\" style={{display:'flex', marginLeft: 'auto'}}>\n                <NavItem value=\"Contact\"/>\n                <NavItem value=\"About\"/>\n                <NavItem value=\"Schedule\"/>\n                <NavItem value=\"Divisions\"/>\n                <NavItem value=\"Clubs\"/>\n                <NavItem value=\"Photos\"/>\n            </List>\n        );\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TypoGraphy from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport NavBar from './components/NavBar.js';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport './App.css';\nimport eesa_icon from './images/eesa-icon.png';\nimport Search from '@material-ui/icons/Search.js';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div style={{height:'100%', width: '100%'}}>\n\t\t\t\t<AppBar id=\"appBar\" position=\"static\">\n\t\t\t\t\t<Toolbar style={{display:'flex'}}>\n\t\t\t\t\t\t<Avatar src={eesa_icon} id=\"avatar\"></Avatar>\n\t\t\t\t\t\t<TypoGraphy variant=\"title\" id=\"appBarTitle\">\n\t\t\t\t\t\t\tNTU EESA\n           \t\t\t\t</TypoGraphy>\n\t\t\t\t\t\t<NavBar/>\n\t\t\t\t\t\t<TypoGraphy>\n\t\t\t\t\t\t\t<Search id=\"searchIcon\"/>\n\t\t\t\t\t\t</TypoGraphy>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t<Paper id=\"paperContainer\">\n\t\t\t\t\t<div id=\"backgroundImageContainer\"></div>\n\t\t\t\t\t<div id=\"outerContainer\">\n\t\t\t\t\t\t<TypoGraphy variant=\"title\" id=\"entryTitle\">\n\t\t\t\t\t\t\t國立台灣大學電機工程學系學會\n\t\t\t\t\t\t</TypoGraphy>\n\t\t\t\t\t\t<div id=\"innerContainer\">\n\t\t\t\t\t\t\t<Button id=\"button1\">聯絡我們</Button>\n\t\t\t\t\t\t\t<Button id=\"button2\">台大電機系官網</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Paper>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/eesa-icon.34d3d199.png\";"],"sourceRoot":""}